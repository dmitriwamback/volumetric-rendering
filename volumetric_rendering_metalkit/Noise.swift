//
//  Noise.swift
//  volumetric_rendering_metalkit
//
//  Created by Dmitri Wamback on 2025-06-16.
//

import math_h

let p: [Int] = [151,160,137,91,90,105,
                131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,203,
                190,126,148,247,120,234,75,0,6,197,62,94,252,219,203,117,35,11,32,57,177,133,
                88,237,149,56,87,174,20,125,136,171,168,68,175,74,15,71,134,139,48,27,166,177,
                146,158,21,83,111,229,12,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,
                54,65,25,63,161,111,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,
                188,159,86,164,100,109,198,173,186,223,64,52,217,226,250,124,123,5,202,38,147,
                118,126,255,182,185,212,207,206,59,227,147,16,58,17,182,189,28,142,223,183,170,
                213,119,248,152,222,4,154,163,70,221,153,101,155,167,43,172,119,129,222,39,253,
                19,98,108,110,189,113,224,232,178,185,112,104,218,246,97,228,
                251,134,242,193,238,210,144,12,191,179,162,241,181,151,145,25,249,14,29,107,
                49,192,214,131,181,199,106,57,184,84,204,176,115,121,150,145,127,24,150,254,
                138,236,205,93,222,114,167,229,224,172,243,141,128,195,178,166,215,161,156,180,
                151,160,137,91,90,105,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
                8,99,37,240,21,10,203,190,126,148,247,120,234,75,0,6,197,62,94,252,219,203,
                117,35,11,32,57,177,133,88,237,149,56,87,174,20,125,136,171,168,68,175,74,15,
                71,134,139,48,27,166,177,146,158,21,83,111,229,12,60,211,133,230,220,105,92,41,
                55,46,245,40,244,102,143,54,65,25,63,161,111,216,80,73,209,76,132,187,208,
                89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,223,64,52,217,
                226,250,124,123,5,202,38,147,118,126,255,182,185,212,207,206,59,227,147,16,
                58,17,182,189,28,142,223,183,170,213,119,248,152,222,4,154,163,170,221,153,101,
                155,167,43,172,119,129,222,39,253,19,98,108,110,189,113,224,232,178,185,
                112,104,218,246,97,228,251,134,242,193,238,210,144,12,191,179,162,241,181,151,
                145,25,249,14,29,107,49,192,214,131,181,199,106,57,184,84,204,176,115,121,
                150,145,127,24,150,254,138,236,205,93,222,114,167,229,224,172,243,141,128,195,
                178,166,215,161,156,180]

func fade(t: Float) -> Float {
    return t * t * t * (t * (t * 6 - 15) + 10)
}

func lerp(t: Float, a: Float, b: Float) -> Float {
    return a + t * (b - a);
}

func gradient(hash: Int, x: Float, y: Float, z: Float) -> Float {
    let h: Int = hash & 15;
    let u: Float = h < 8 ? x : y;
    let v: Float = h < 4 ? y : h == 12 || h == 14 ? x : z;

    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

func noise(x: Float, y: Float, z: Float) -> Float {
    
    let x1 = Int(floor(x)) & 255
    let y1 = Int(floor(y)) & 255
    let z1 = Int(floor(z)) & 255
    
    var xi = x
    var yi = y
    var zi = z

    xi -= floor(xi);
    yi -= floor(yi);
    zi -= floor(zi);

    let x2 = fade(t: xi),
        y2 = fade(t: yi),
        z2 = fade(t: zi)

    let A = p[x1] + y1, AA = p[A] + z1, AB = p[A + 1] + z1,      // HASH COORDINATES OF
        B = p[x1 + 1] + y1, BA = p[B] + z1, BB = p[B + 1] + z1;      // THE 8 CUBE CORNERS,

    return lerp(t: z2, a: lerp(t: y2, a: lerp(t: x2, a: gradient(hash: p[AA],     x: xi,     y: yi,     z: zi),
                                                     b: gradient(hash: p[BA],     x: xi - 1, y: yi,     z: zi)),
                                      b: lerp(t: x2, a: gradient(hash: p[AB],     x: xi,     y: yi - 1, z: zi),
                                                     b: gradient(hash: p[BB],     x: xi - 1, y: yi - 1, z: zi))),
                       b: lerp(t: y2, a: lerp(t: x2, a: gradient(hash: p[AA + 1], x: xi,     y: yi,     z: zi - 1),
                                                     b: gradient(hash: p[BA + 1], x: xi - 1, y: yi,     z: zi - 1)),
                                      b: lerp(t: x2, a: gradient(hash: p[AB + 1], x: xi,     y: yi - 1, z: zi - 1),
                                                     b: gradient(hash: p[BB + 1], x: xi - 1, y: yi - 1, z: zi - 1))));
}


func layeredNoise3D(x: Float, y: Float, lacunarity: Float, persistance: Float, octaves: Int, seed: Float) -> Float {
    
    var frequency: Float = 2.0
    var amplitude: Float = 2.0
    
    var result: Float = 0
    
    for _ in 0..<octaves {
        result += noise(x: x * frequency, y: y * frequency, z: seed * frequency) * amplitude
        frequency *= lacunarity
        amplitude *= persistance
    }
    
    return result
}
